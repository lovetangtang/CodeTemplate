<%@ CodeTemplate Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8" Debug="False" Description="生成数据库实体" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="属性" Description="要生成实体的数据表" %>
<%@ Property Name="NameSpace" Type="System.String" Optional="False" Default="M3.Domain.Entities" Category="属性" Description="实体类所在的命名空间" %>
<%@ Property Name="opuser" Type="System.String" Default="作者" Optional="False" Category="属性" Description="请输入您的名字" %>
<%@ Map Name="CSharpAlias" Src="System-CSharpAlias" Description="System to C# Type Map" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>

/*
*本代码由代码生成器自动生成，请不要更改此文件的任何代码。
*生成时间：<%= DateTime.Now.ToLocalTime() %>
*生成者：<%= opuser %>
*/
using DapperExtensions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ST.BaseService.Data.Repository;
using ST.BaseService.Domain.Core;
using ST.BaseService.Domain.Interface;
using ST.BaseService.Core;

namespace <%= this.NameSpace %>
{
    public class <%= this.SourceTable.Name %>Service : I<%= this.SourceTable.Name %>Service
    {
        private readonly IBaseRepository<<%= this.SourceTable.Name %>> _db;
        public <%= this.SourceTable.Name %>Service(IBaseRepository<<%= this.SourceTable.Name %>> db)
        {
            this._db = db;
        }
    
        public IEnumerable<<%= this.SourceTable.Name %>> GetPage(string sortFile, out int pcount, bool? idAsc = true, int? page = 1, int? resultsPerPage = 10)
        {
            var pg = new PredicateGroup { Operator = GroupOperator.And, Predicates = new List<IPredicate>() };
            //if (!string.IsNullOrEmpty(title))
                //pg.Predicates.Add(Predicates.Field<Ads>(f => f.Code, Operator.Like, title));
            IList<ISort> sort = new List<ISort>();
            if (string.IsNullOrEmpty(sortFile))
                sortFile = "Id";
            sort.Add(new Sort { PropertyName = sortFile, Ascending = idAsc.Value });
            return _db.GetPage(pg, sort, page.Value - 1, resultsPerPage.Value, out pcount);
        }

        public int Add(<%= this.SourceTable.Name %> model)
        {
            return _db.Add(model);
        }

        public bool Update(<%= this.SourceTable.Name %> model)
        {
            return _db.Update(model);
        }

        public Core.<%= this.SourceTable.Name %> Get(int Id)
        {
            return _db.Get(Id);
        }
        public bool Delete(int Id)
        {
            var mdoel = _db.Get(Id);
            return _db.Delete(mdoel);
        }

        public bool Deletes(string ids)
        {
            var pg = new PredicateGroup { Operator = GroupOperator.Or, Predicates = new List<IPredicate>() };
            if (!string.IsNullOrEmpty(ids))
            {
                foreach (string item in ids.Split(','))
                {
                    pg.Predicates.Add(Predicates.Field<<%= this.SourceTable.Name %>>(f => f.Id, Operator.Eq, item.IntByStr(0).Value));
                }
            }
            return _db.Delete(pg);
        }
    }
}
<%-- 执行输出文件的函数 --%>


<script runat="template">
 //如果类型为int，或datetime类型输出可空类型
 public string ControlType(object val)
 {
     var ty=val.ToString();
     if(ty=="int")
     {
         return "Nullable<int>";
     }
     if(ty=="System.DateTime")
     {
         return "Nullable<DateTime>";
     }
     if(ty == "decimal")
     {
          return "Nullable<decimal>";
     }
     if(ty=="bool")
     {
        return "Nullable<bool>";
     }
     return ty;
 }
</script>

